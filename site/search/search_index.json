{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CoastSeg","text":""},{"location":"#this-is-new","title":"THIS IS NEW","text":""},{"location":"#useful-links","title":"Useful Links","text":"<ul> <li>Wiki</li> <li>Discussion</li> <li>Contribution Guide</li> </ul>"},{"location":"#what-is-coastseg","title":"What is CoastSeg?","text":"<p>Coastseg stands for Coastal Segmentation, it is an interactive jupyter notebook for downloading satellite imagery with CoastSat and applying Doodleverse/Zoo image segmentation models to satellite imagery. CoastSeg provides an interactive interface for drawing Regions of Interest (ROIs) on a map, downloading satellite imagery, loading geojson files, extracting shorelines from satellite imagery, and much more. In a nutshell, it is ...</p> <ul> <li>... an easy way to download time-series of cloud-masked and post-processed satellite imagery anywhere in the world</li> <li>... a mapping extension for CoastSat using Segmentation Zoo models.</li> <li>... an interactive interface to download satellite imagery using CoastSat from Google Earth Engine</li> <li>... an interactive interface for extracting shorelines from satellite imagery</li> <li>... an interactive interface to apply segmentation models to satellite imagery</li> </ul> <p>In more detail, CoastSeg represents the following advances in satellite-derived shoreline workflows:</p> <ol> <li>An emulation of the CoastSat methodology for defining a shoreline extraction project, image downloading, shoreline extraction, shoreline filtering, and tide correction, all within a single jupyter notebook that can be accessed online</li> <li>A pip-installable package for CoastSat workflows</li> <li>Use of concurrency for image downloads from Google Earth Engine</li> <li>A faster and more convenient API-based methodology for tidal height estimation, using pyTMD</li> <li>An initial implementation of an alternative shoreline mapping workflow using Zoo models from the Doodleverse</li> <li>A conda environment that can work on secure networks</li> <li>Script-based data wrangling utilities</li> <li>Hyperparameter experimentation and tracking using an organizational workflow idea called \u2018Sessions\u2019</li> <li>Supporting databases for transects, reference shorelines, beach slopes, and other useful metadata variables</li> <li>A deep-learning based shoreline extraction workflow (still in development)</li> </ol> <p>Version 1 is now stable, and we have a lot of planned new features for version 2.</p> <p></p> <ul> <li>Create ROIs(regions of interest) along the coast and automatically load shorelines on the map.</li> <li>Use Google Earth Engine to automatically download satellite imagery for each ROI clicked on the map.</li> <li>Coastseg can automatically extract shorelines from downloaded satellite imagery.</li> </ul>"},{"location":"#installation-instructions","title":"Installation Instructions","text":"<p>We recommend that you use Windows 10, Windows 11, or Ubuntu Linux. Mac users, please see here</p> <p>In order to use Coastseg you need to install Python packages in an environment. We recommend you use Anaconda or Miniconda to install the python packages in an environment for Coastseg.</p> <p>After you install miniconda/Anaconda on your PC, open the Anaconda prompt or Terminal in Mac and Linux and use the <code>cd</code> command (change directory) to go the folder where you have downloaded the Coastseg repository.</p> <p>We highly recommend you install CoastSeg using <code>conda</code> following the instructions in Install from conda-forge.</p>"},{"location":"#install-from-conda-forge","title":"Install from conda-forge","text":"<ol> <li> <p>Create an miniconda/Anaconda environment and Activate it</p> </li> <li> <p>This command creates an anaconda environment named <code>coastseg</code> and installs <code>python 3.10</code> in it.   <pre><code>conda create --name coastseg python=3.10 -y\nconda activate coastseg\n</code></pre></p> </li> <li> <p>Install coastseg</p> </li> </ol> <pre><code>conda install -c conda-forge coastseg\n</code></pre> <ol> <li> <p>(Optional) Install Optional Dependencies</p> </li> <li> <p>Only install these dependencies if you plan to use CoastSeg's Zoo workflow notebook.</p> </li> </ol> <pre><code>pip install tensorflow\npip install transformers\n</code></pre>"},{"location":"#install-from-pypi","title":"Install from Pypi","text":"<ol> <li> <p>Create an miniconda/Anaconda environment</p> </li> <li> <p>This command creates an anaconda environment named <code>coastseg</code> and installs <code>python 3.10</code> in it.   <pre><code>conda create --name coastseg python=3.10 -y\n</code></pre></p> </li> <li> <p>Activate your conda environment</p> </li> </ol> <pre><code>conda activate coastseg\n</code></pre> <ul> <li>If you have successfully activated coastseg you should see that your terminal's command line prompt should now start with <code>(coastseg)</code>.</li> </ul> <p></p> <ol> <li>Install Conda Dependencies</li> <li>CoastSeg requires <code>jupyterlab</code> and <code>geopandas</code> to function properly so they will be installed in the <code>coastseg</code> environment.</li> <li>Geopandas has GDAL as a dependency so its best to install it with conda.</li> <li>Make sure to install geopandas from the <code>conda-forge</code> channel to ensure you get the latest version.</li> <li>Make sure to install both jupyterlab and geopandas from the conda forge channel to avoid dependency conflicts      <pre><code>conda install -c conda-forge geopandas -y\n</code></pre></li> <li>Install the CoastSeg from PyPi    <pre><code>pip install coastseg\n</code></pre></li> <li>Uninstall the h5py installed by pip and reinstall with conda-forge</li> <li><code>pip install jsonschema==4.19.0</code> is a temporary command you have to run until issue https://github.com/stac-utils/pystac/issues/1214 is resolved    <pre><code>pip install jsonschema==4.19.0 --user\npip uninstall h5py -y\nconda install -c conda-forge h5py -y\n</code></pre></li> </ol>"},{"location":"#having-installation-errors","title":"Having Installation Errors?","text":"<p>Use the command <code>conda clean --all</code> to clean old packages from your anaconda base environment. Ensure you are not in your coastseg environment or any other environment by running <code>conda deactivate</code>, to deactivate any environment you're in before running <code>conda clean --all</code>. It is recommended that you have Anaconda prompt (terminal for Mac and Linux) open as an administrator before you attempt to install <code>coastseg</code> again.</p>"},{"location":"#conda-clean-steps","title":"Conda Clean Steps","text":"<pre><code>conda deactivate\nconda clean --all\n</code></pre>"},{"location":"#coastseg-update-guide","title":"CoastSeg Update Guide","text":"<p>This guide is designed to help you easily update CoastSeg, whether you're updating to a specific version, the latest version, applying a patch, or updating code and notebooks from GitHub.</p>"},{"location":"#step-1-install-coastseg-from-pypi","title":"Step 1: Install CoastSeg from PyPi","text":""},{"location":"#option-1-update-to-the-latest-version","title":"Option 1: Update to the latest version","text":"<ol> <li>Install CoastSeg from PyPi</li> <li> <p>To ensure you have the latest features and fixes, use this command:    <pre><code>  pip install coastseg --upgrade\n</code></pre></p> </li> <li> <p>Don't worry if you see the warning message below. This is normal</p> </li> </ol> <pre><code>  \"ERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\"\n</code></pre> <ol> <li>Install jsonschema</li> <li>This is necessary to run coastseg in a jupyter notebook.</li> </ol> <pre><code> pip install jsonschema==4.19.0 --user\n</code></pre>"},{"location":"#option-2-update-to-a-specific-version","title":"Option 2: Update to a Specific Version","text":"<ol> <li>Install CoastSeg from PyPi</li> <li>If you need a specific version of CoastSeg, use this command:</li> <li> <p>Replace  with the desired version number (e.g., 1.1.26).    <pre><code> pip install coastseg==&lt;version&gt;\n</code></pre> <li> <p>Don't worry if you see the warning message below. This is normal</p> </li> <pre><code>  \"ERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\"\n</code></pre> <ol> <li>Install jsonschema</li> <li>This is necessary to run coastseg in a jupyter notebook.</li> </ol> <pre><code> pip install jsonschema==4.19.0 --user\n</code></pre>"},{"location":"#step-2-update-code-and-notebooks-from-github","title":"Step 2: Update Code and Notebooks from GitHub","text":"\u00b6 <p>(Optional) Follow these steps if you want the latest notebooks or code updates from the CoastSeg GitHub repository.</p> Click to expand instructions    ### Step 1: Open CoastSeg in Anaconda    1. Open Anaconda Prompt    2. Activate the coastseg environment    <pre><code>  conda activate coastseg\n</code></pre> 3. Go to your coastseg location <pre><code>cd &lt;coastseg location&gt;\n</code></pre> ### Step 2: Check for a Remote Connection to CoastSeg Repository -Run the command below. In the output of this command you should see `origin  https://github.com/Doodleverse/CoastSeg.git (fetch)` <pre><code>git remote -v\n</code></pre> ![git remote output](https://github.com/Doodleverse/CoastSeg/assets/61564689/adbb9783-0f0e-4081-ad3f-cbfb00964a9d) - If you don't see this output, then run the following command   <pre><code> git remote add origin  https://github.com/Doodleverse/CoastSeg.git\n git pull origin main\n</code></pre> ### Step 3: Pull the Latest Changes    1. Run the command below       <pre><code> git pull origin main\n</code></pre>    2. If you recieve an error message like the one shown below then proceed to 3, otherwise go to [Go to Step 4: Verify Update Success](#step-4-verify-update-success)         <pre><code>    Please commit your changes or stash them before you merge\n    Aborting\n</code></pre>   3.  Run the command below:  - **WARNING** This will clear out anything you have written to the `certifications.json` make sure to save that file to a new location then move it back when you're done upgrading  <pre><code>       git fetch origin\n       git reset --hard origin/main\n       git pull origin main\n</code></pre>  ### Step 4: Verify Update Success  <pre><code>git status\n</code></pre>  - This command should return the following message - ```   On branch main   Your branch is up to date with 'origin/main'.   ```   <p></p>"},{"location":"#authors","title":"Authors","text":"<p>Package maintainers:</p> <ul> <li>@dbuscombe-usgs Contracted to USGS Pacific Coastal and Marine Science Center.</li> <li>@2320sharon : Lead Software Developer / Contracted to USGS Pacific Coastal and Marine Science Center.</li> </ul> <p>Contributions:</p> <ul> <li>@ebgoldstein</li> <li>@venuswku</li> <li>@robbibt</li> <li>@edlazarus</li> <li>Beta testers: Catherine Janda, Ann Gibbs, Jon Warrick, Andrea O\u2019Neill, Kathryn Weber, Julia Heslin (USGS)</li> <li>We would like to express our gratitude to all the contributors who made this release possible. Thank you to everyone who tested the beta versions of coastseg and provided us with the feedback we needed to improve coastseg. Thanks also to the developers and maintainers of pyTMD, DEA-tools, xarray, and GDAL, without which this project would be impossible</li> </ul>"},{"location":"#citations","title":"Citations","text":"<p>Thank you to all the amazing research who contributed their transects to coastseg.</p> <ol> <li>Hawaii small islands https://pubs.usgs.gov/of/2011/1009/data.html</li> <li>Barter Island, Alaska https://www.sciencebase.gov/catalog/item/5fa1f10ad34e198cb793cee4</li> <li>Pacific Northwest, Gulf, and SE USA: Dr Sean Vitousek, USGS-PCMSC, based on DSAS transects</li> <li>Atlantic barrier islands: https://www.sciencebase.gov/catalog/item/5d5ece47e4b01d82ce961e36</li> <li>Mexico, New Zealand, Japan, Chile, Peru all from: https://zenodo.org/record/7758183#.ZCXZMcrMJPY</li> <li>Snyder, A.G., and Gibbs, A.E., 2019, National assessment of shoreline change: A GIS compilation of updated vector shorelines and associated shoreline change data for the north coast of Alaska, Icy Cape to Cape Prince of Wales: U.S. Geological Survey data release, https://doi.org/10.5066/P9H1S1PV.</li> <li>Gibbs, A.E., Ohman, K.A., Coppersmith, R., and Richmond, B.M., 2017, National Assessment of Shoreline Change: A GIS compilation of updated vector shorelines and associated shoreline change data for the north coast of Alaska, U.S. Canadian border to Icy Cape: U.S. Geological Survey data release, https://doi.org/10.5066/F72Z13N1.</li> <li>Himmelstoss, E.A., Kratzmann, M., Hapke, C., Thieler, E.R., and List, J., 2010, The National Assessment of Shoreline Change: A GIS Compilation of Vector Shorelines and Associated Shoreline Change Data for the New England and Mid-Atlantic Coasts: U.S. Geological Survey Open-File Report 2010-1119, available at https://pubs.usgs.gov/of/2010/1119/.</li> <li>Kilian Vos. (2023). Time-series of shoreline change along the Pacific Rim (v1.4) [Data set]. Zenodo. https://doi.org/10.5281/zenodo.7758183</li> <li>Vos, Kilian, Wen, Deng, Harley, Mitchell D., Turner, Ian L., &amp; Splinter, Kristen D. (2022). Beach-face slope dataset for Australia (Version 2) [Data set]. Zenodo. https://doi.org/10.5281/zenodo.7272538</li> <li>Gibbs, A.E., Jones, B.M., and Richmond, B.M., 2020, A GIS compilation of vector shorelines and coastal bluff edge positions, and associated rate-of-change data for Barter Island, Alaska: U.S. Geological Survey data release, https://doi.org/10.5066/P9CRBC5I.</li> </ol> <p>To compile into a pdf use</p> <pre><code>pandoc paper.md -o paper.pdf --bibliography paper.bib\n</code></pre>"},{"location":"extract_shorelines/","title":"Extract Shorelines From Downloaded Imagery","text":"<p>Extracted Shorelines are shoreline vectors in the imagery you downloaded from GEE. The extracted shorelines are created by analyzing each <code>.tiff</code> file for each set of satellite imagery downloaded to check if a shoreline classifier can be applied to it. If the <code>.tiff</code> file meets the quality standards by being under the maximum threshold for cloud cover and other metrics the image is analyzed by a special image segmentation model which classifies the sand, water and surf in the image. Using the labeled images from the image segmentation model a shoreline vector will be detected in the image and saved to a dictionary entry for the ROI it belonged to. The extracted shoreline will appear as colored vectors along the coastline.</p>"},{"location":"extract_shorelines/#why-does-the-extract-shoreline-look-weird","title":"Why does the Extract Shoreline Look Weird?","text":"<p>The classifier to extract shorelines fails for complex shorelines sometimes. If the extracted shorelines zig and zags across the coastline this is likely the result of the classifier failing to classify an image. You may want to try changing the <code>sand color</code> parameter in the settings dropdown depending on if the sand on the coast is dark or light.</p>"},{"location":"extract_shorelines/#why-did-isnt-there-an-extracted-shoreline","title":"Why did isn't there an Extracted Shoreline","text":"<ol> <li>Sometimes shorelines will be not be able to be extracted from any of the imagery downloaded for the ROI on the map due to image quality issues such as excessive cloud cover or too many 'no data'(black) pixels in the downloaded imagery. When this is the case the extracted shoreline will not appear on the map.    The message <code>The ROI id does not have a shoreline to extract.</code> will print when this happens</li> </ol>"},{"location":"extract_shorelines/#how-to-extract-shorelines-from-your-imagery","title":"How to Extract Shorelines From Your Imagery","text":"<p>See the extracted shorelines for the ROIs selected on the map by first selecting your ROIs, downloading their data from GEE and then clicking extract shorelines.</p> <ol> <li>Click the ROIs to extract shorelines from on the map</li> <li>Download the ROIs data from GEE or already have it downloaded.</li> <li>Click the button <code>extract shorelines</code></li> <li>You should see extracted shorelines appear within some of your ROIs.</li> <li>If this works you can compute the time-series of shoreline change along shore-normal transects by clicking the <code>Compute Transects</code> Button.</li> </ol> <p></p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Check out the rest of the wiki for more tutorials</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ol> <li>Sign up to use Google Earth Engine Python API</li> </ol> <p>-Request access to Google Earth Engine at https://signup.earthengine.google.com/</p> <p>-It takes about 1 day for Google to approve requests.</p>"},{"location":"getting-started/#installation-setup","title":"Installation &amp; SetUp","text":"<ol> <li> <p>Activate the coastseg conda environment    <pre><code>conda activate coastseg\n</code></pre></p> </li> <li> <p>If you have successfully activated coastseg you should see that your terminal's command line prompt should now start with <code>(coastseg)</code>.</p> </li> </ol> <p></p> <ol> <li>Download CoastSeg from GitHub</li> </ol> <pre><code>git clone coastseg --depth 1 https://github.com/Doodleverse/CoastSeg.git\n</code></pre>"},{"location":"getting-started/#extract-shorelines","title":"Extract Shorelines","text":"<ol> <li> <p>Launch Jupyter Lab</p> </li> <li> <p>Run this command in the coastseg directory to launch the notebook <code>SDS_coastsat_classifier</code> <pre><code>conda activate coastseg\njupyter lab SDS_coastsat_classifier.ipynb\n</code></pre></p> </li> <li> <p>Authenticate with Google Earth Engine    </p> </li> <li>Draw an Bounding Box</li> <li>Generate ROI (Region of Interest)</li> <li> <p>Load Transects    </p> </li> <li> <p>Modify the Settings</p> </li> <li>Change the satellites to L8 and L9</li> <li>Change the dates to 12/01/2023 - 03/01/2024</li> <li>Change the size of the reference shoreline buffer</li> <li>Click <code>Save Settings</code></li> <li>Name the Session</li> <li>Extract Shorelines    </li> </ol>"},{"location":"getting-started/#apply-tidal-correction-to-extracted-shorelines-optional","title":"Apply Tidal Correction to Extracted Shorelines (Optional)","text":"<ol> <li>Download the tide model</li> <li>Before tidal correction can be applied the tide model must be downloaded</li> <li>Follow the tutorial: How to Download Tide Model</li> <li>Load the Session with Extracted Shorelines</li> <li>Re-open the jupyter notebook</li> <li>Under the Kernal menu Click 'restart and clear outputs of all cells'</li> <li>Click Load Session and load the same we made before ''</li> <li> <p>Click Correct Tides</p> </li> <li> <p>Click the ROI ID from the dropdown</p> </li> <li>Enter Beach Slope</li> <li>Enter Beach Elevation relative to Mean Sea Level</li> </ol> <p></p>"},{"location":"how-to-auth/","title":"How to Authenticate with Google Earth Engine(GEE)","text":""},{"location":"how-to-auth/#why-is-it-necessary-to-authenticate-with-google-earth-engine","title":"Why is it necessary to Authenticate with Google Earth Engine?","text":"<p>CoastSeg uses Google Earth Engine(GEE) to download satellite imagery. In order to use GEE an authentication token is needed. To get the GEE token you need to run the notebook cell containing the command <code>ee.Initialize()</code> ,which either 1. loads in your GEE token if it exists or 2. prompts you to create a new token. GEE tokens last 1 week, so every week you will need to go through the process of authenticating with GEE with I have outlined below in the section How to authenticate with Google Earth Engine(GEE) in a coastseg notebook.</p>"},{"location":"how-to-auth/#how-to-get-an-account-with-google-earth-engine","title":"How to get an Account with Google Earth Engine","text":"<p>You can access Google Earth Engine at https://signup.earthengine.google.com/. It takes about 1 day for Google to approve requests. You only need to do this step once. Once your request has been approved you can follow the following steps to authenticate with google earth engine with coastseg.</p>"},{"location":"how-to-auth/#how-to-authenticate-with-google-earth-enginegee-in-a-coastseg-notebook","title":"How to authenticate with Google Earth Engine(GEE) in a coastseg notebook","text":""},{"location":"how-to-auth/#if-youre-running-coastseg-locally","title":"If you're running coastseg locally:","text":"<ol> <li>Activate coastseg environment by running the following command on the Anaconda Prompt:</li> </ol> <pre><code>conda activate coastseg\n</code></pre> <ol> <li>Launch the notebook in your coastseg environment</li> </ol> <pre><code>jupyter lab &lt;notebook name&gt;\n</code></pre> <ol> <li>Run the notebook cell containing the command <code>ee.Initialize()</code>.      The <code>earthengine authenticate</code> program will cause a web browser will open, log in with a Gmail account, and accept the terms and conditions. Then copy the authorization code into the indicated cell block into the notebook.</li> </ol>"},{"location":"how-to-auth/#if-youre-running-coastseg-in-google-colab","title":"If you're running coastseg in google colab:","text":"<ol> <li>Run the notebook cell containing the command <code>ee.Initialize()</code>.      The <code>earthengine authenticate</code> program will cause a web browser will open, log in with a Gmail account, and accept the terms and conditions. Then copy the authorization code into the indicated cell block into the notebook.</li> </ol>"},{"location":"how-to-auth/#errors-with-gcloud","title":"Errors with <code>gcloud</code>?","text":"<p>In the latest version of the earthengine-api, the authentication is done with gcloud. If an error is raised about gcloud missing, go to https://cloud.google.com/sdk/docs/install and install gcloud. After you have installed it, close the Anaconda Prompt and restart it, then activate the environment before running earthengine authenticate again.</p>"},{"location":"how-to-download/","title":"How to Download Imagery","text":""},{"location":"how-to-download/#steps-to-download-imagery","title":"Steps to Download Imagery","text":"<ol> <li>Activate the Notebook:</li> </ol> <pre><code>conda activate coastseg\njupyter lab SDS_coastsat_classifier.ipynb\n</code></pre> <ol> <li> <p>Set the ROI Area</p> </li> <li> <p>Recommend ROI area: 20km\u00b2 - 30km\u00b2</p> </li> <li>For Non-overlapping ROIs: Set <code>Small ROI Area</code> to 0 and <code>Large ROI Area</code> to the desired ROI area.</li> <li> <p>For Overlapping ROIs: Assign a value to <code>Small ROI Area</code> and set <code>Large ROI Area</code> to the desired ROI area.</p> </li> <li> <p>Define the Bounding Box:</p> </li> <li> <p>Use the rectangle tool (located on the map's right-hand corner) to draw a bounding box around your desired area.</p> </li> <li>Ensure the bounding box isn't excessively large, or it will be removed.</li> <li>Before generating ROIs, click the <code>load shorelines</code> button to verify the presence of shorelines within the bounding box.</li> <li>\u26a0\ufe0f If no shorelines are detected, ROIs can't be created. Consider uploading your shorelines using a geojson file.</li> <li>Additionally, check for any transects within your bounding box. If none are present, upload your transects via a geojson file.</li> </ol> <p></p> <ol> <li> <p>Generate ROIs:</p> </li> <li> <p>Click the <code>Generate ROIs</code> button. This action creates a grid of ROIs along the shoreline within the bounding box.</p> </li> </ol> <p>5.Select Desired ROIs:</p> <ul> <li>After the ROIs appear on the map, select those for which you want to download satellite imagery.</li> </ul> <p>6.Download Imagery:</p> <ul> <li>Click <code>Download Imagery</code>. The imagery for the chosen ROIs (highlighted in blue) will be downloaded.</li> </ul> <p></p>"},{"location":"how-to-download/#understanding-roi-region-of-interest","title":"Understanding ROI (Region of Interest)","text":"<p>ROI stands for Region of Interest. It represents a specified rectangular area for downloading satellite imagery from GEE (Google Earth Engine). Due to GEE's area limitations, multiple ROIs are created along the coastline within the user-defined bounding box. If data for an ROI is downloaded, it is stored in a dedicated directory named using the format, <code>ID_&lt;ROI_ID&gt;_datetime&lt;timestamp&gt;</code>, e.g., <code>ID_3_datetime11-22-22__11_15_15</code>.</p>"},{"location":"how-to-download/#roi-directory-layout","title":"ROI Directory Layout","text":"<ul> <li>Each ROI can encompass imagery from multiple satellites, such as Sentinel 2 and Landsat 8 &amp; 9.</li> <li>Imagery from each satellite has a dedicated subdirectory. For instance, Landsat 8 images are in <code>L8</code> and Sentinel 2 in <code>S2</code>.</li> <li>The <code>jpg_files</code> subdirectory contains jpeg images for all downloaded satellites, organized into RGB, NIR, and SWIR folders.</li> <li>For example, an RGB image from Sentinel 2 would reside in <code>jpg_files\\RGB</code>, named like <code>2018-12-06-19-04-16_RGB_S2.jpg</code>.</li> </ul>"},{"location":"how-to-download/#sample-roi-directory-structure","title":"Sample ROI Directory Structure","text":"<p>This diagram illustrates the file organization of the ROI directory when an ROI is downloaded.</p> <pre><code>\u251c\u2500\u2500 CoastSeg\n|\n|___data\n|    |_ ID_3_datetime11-22-22__11_15_15\n\u2502\u00a0\u00a0 |   |_ L8\n\u2502\u00a0\u00a0 |   |_ L9\n\u2502\u00a0\u00a0 |   |_ S2\n\u2502\u00a0\u00a0 |   |_ jpg_files\n\u2502\u00a0\u00a0 |   |  |_ preprocessed\n|   \u2502\u00a0\u00a0 |   |  |_ RGB\n|   |   \u2502\u00a0\u00a0 |  |  |_ 2018-12-06-19-04-16_RGB_S2.jpg\n|   |   \u2502\u00a0\u00a0 |  |  |_ 2018-12-06-19-04-16_RGB_L8.jpg\n|   |   \u2502\u00a0\u00a0 |  |  |_ 2018-12-06-19-04-16_RGB_L9.jpg\n|   \u2502\u00a0\u00a0 |   |  |_ NIR\n|   |   \u2502\u00a0\u00a0 |  |  |_ 2018-12-06-19-04-16_NIR_S2.jpg\n|   |   \u2502\u00a0\u00a0 |  |  |_ &lt;rest of images...&gt;\n|   \u2502\u00a0\u00a0 |   |  |_ SWIR\n|   |   \u2502\u00a0\u00a0 |  |  |_ 2018-12-06-19-04-16_SWIR_S2.jpg\n|   |   \u2502\u00a0\u00a0 |  |  |_ &lt;rest of images...&gt;\n\u2502\u00a0\u00a0 |   |   |_detection\n|   \u2502\u00a0\u00a0 |   |  |_&lt;jpgs of detected shorelines&gt;\n\u2502\u00a0\u00a0 |   |_config.json\n\u2502\u00a0\u00a0 |   |_config_gdf.json\n\u2502\u00a0\u00a0 |   |_extracted_shorelines.geojson\n</code></pre>"},{"location":"install/","title":"Install","text":""},{"location":"install/#regular-users-on-windows-and-linux","title":"Regular users on Windows and Linux","text":"<p>Please refer to the installation guide on the README</p>"},{"location":"install/#mac-users","title":"Mac users","text":"<p>CoastSeg requires Tensorflow (TF), which doesn't play nicely with Mac. We advise you to use either Linux or Windows, if you can. We cannot troubleshoot Mac installations, but we can offer the following advice:</p> <ul> <li>TF for mac has its own instructions: https://developer.apple.com/metal/tensorflow-plugin/</li> <li>New Mac silicon runs TF, (and has its own TF branch), but the old intel Mac chips might not work with parts of TF.</li> <li>We are not sure if TF is compatible with M2 macs</li> <li>Our continuous integration tests check only the 'latest' version of Mac OS.</li> <li>If you get a working installation on Mac, please let us know, and we can edit these pages to communicate better advice. Thanks in advance</li> </ul>"},{"location":"install/#users-working-over-secure-network","title":"Users working over secure network","text":"<p>First, some notes:</p> <ul> <li>\u26a0\ufe0f The CoastSeg team is aware of issues with installing CoastSeg's conda dependencies \u26a0\ufe0f</li> <li>\u26a0\ufe0fThe following instructions are valid as of 2023-09-12. If this proposed solution fails for you, please create a new Issue \u26a0\ufe0f)</li> <li>\u26a0\ufe0f Where possible, we advise you install the initial Coastseg conda environment not over a secure network. If and ONLY if that is not possible, please follow the instructions posted below carefully</li> <li>If you are running these commands on a secure network verify you are connected to your VPN before running the following commands</li> <li>if you get an SSL error while running any of the <code>conda install</code> commands try the following command</li> <li>ONLY RUN THE PIP INSTALL COMMANDS AFTER CREATING A PIP.INI file Go to Phase 1: Create a pip.ini File</li> </ul>"},{"location":"install/#quick-start","title":"Quick Start","text":"<p>Second, you must temporarily (for a few minutes) disable SSL verification. This should be done only once, when setting up the initial conda environment. If you find yourself having to do this for other instructions listed below and elsewhere, something is wrong and you should either start again from scratch, or raise an Issue if there is a legitimate bug. Coastseg developers are not liable for any unintended effects of ignoring the advice posted here, i.e. leaving <code>ssl_verify</code> to be <code>False</code> outside of the specific and unique case explained here.</p> <pre><code>conda config --set ssl_verify False\n</code></pre> <p>Now, you can install the rest of the dependencies. You must do this immediately.</p> <pre><code>conda install -c conda-forge geopandas jupyterlab -y\npip install coastseg\npip uninstall h5py -y\nconda install -c conda-forge h5py -y\n</code></pre> <p>Finally, re-enable SSL verification. You must do this immediately after installing the conda packages above. If any of the above commands fail for whatever reason, you must also run this command to re-enable SSL. Coastseg developers are not liable for any unintended effects of ignoring the advice posted here, i.e. leaving <code>ssl_verify</code> to be <code>False</code> outside of the specific and unique case explained here.</p> <pre><code>conda config --set ssl_verify True\n</code></pre>"},{"location":"install/#detailed-guide","title":"Detailed Guide","text":""},{"location":"install/#phase-0-allow-git-to-work-over-a-secure-network","title":"Phase 0: Allow Git to work over a secure network","text":"<ol> <li> <p>Configure git to use ssl</p> </li> <li> <p>Make sure to replace <code>\"C:/Users/ulastname/Documents/DOIRootCA2.cer\"</code> with your user name</p> </li> </ol> <pre><code>git config --global http.sslcainfo \"C:/Users/ulastname/Documents/DOIRootCA2.cer\"\n</code></pre> <ol> <li> <p>Test if this worked</p> </li> <li> <p>This step assumes you have a github account and are in the CoastSeg directory</p> </li> </ol> <pre><code>git pull origin main\n</code></pre>"},{"location":"install/#phase-1-allow-pip-to-work-over-a-secure-network","title":"Phase 1: Allow Pip to work over a secure network","text":"<ol> <li>Open the <code>pip.ini</code> file</li> <li>In anaconda prompt or the command line run:    <pre><code>notepad %APPDATA%\\pip\\pip.ini\n</code></pre></li> <li>Edit the <code>pip.ini</code> file</li> <li>Make sure to replace C:\\Users\\ulastname\\Documents\\cacert_with_doi.pem`</li> <li>save and exit after editing    <pre><code> [global]\n cert = C:\\Users\\ulastname\\Documents\\cacert_with_doi.pem\n</code></pre></li> <li>Check the contents of the pip.ini    <pre><code> pip config list\n</code></pre></li> <li>it should return something like    <pre><code> global.cert='C:\\\\Users\\\\ulastname\\\\Documents\\\\cacert_with_doi.pem'\n</code></pre></li> <li>Test if pip is configured correctly</li> </ol> <p>Run the command :</p> <pre><code>pip -v list\n</code></pre> <p>If you get no errors then you are done! \ud83c\udf8a</p> <p>Did you get errors? If so, run the following command:</p> <pre><code>pip --cert  C:\\\\Users\\\\ulastname\\\\Documents\\\\cacert_with_doi.pem -v list\n</code></pre> <ul> <li>Verify you are connected to your VPN because this command will fail if you are not</li> <li>If this command fails it might double check the correct location of the cert file is listed in your command</li> </ul>"},{"location":"install/#what-to-do-if-pip-fails","title":"What to do if pip fails","text":"<ol> <li> <p>Error Message contains the phrase 'Open SSL Module is not available'</p> <pre><code>Can't connect to HTTPS URL because the SSL module is not available\n</code></pre> </li> <li> <p>Solution: Copy the following files from <code>CONDA_PATH\\Library\\bin</code> to <code>CONDA_PATH\\DLLs</code></p> </li> </ol> <pre><code>libcrypto-1_1-x64.*\nlibssl-1_1-x64.*\n</code></pre> <ul> <li>Make sure to copy <code>libcrypto-1_1-x64.*</code> and <code>libssl-1_1-x64.*</code> to <code>CONDA_PATH\\DLLs</code></li> <li><code>CONDA_PATH</code> is just the path to your anaconda installation</li> <li>Example : <code>CONDA_PATH</code> : <code>C:\\Users\\sfitzpatrick\\Anaconda3</code></li> <li>Example : <code>CONDA_PATH\\Library\\bin</code>: <code>C:\\Users\\sfitzpatrick\\Anaconda3\\Library\\bin</code></li> <li>Example : <code>CONDA_PATH\\DLLs</code>: <code>C:\\Users\\sfitzpatrick\\Anaconda3\\DLLs</code></li> <li>Original Credit for this solution</li> </ul>"},{"location":"install/#phase-2-allow-conda-to-work-over-a-secure-network","title":"Phase 2: Allow Conda to Work Over a Secure Network","text":"<ol> <li>Run the command</li> </ol> <pre><code>conda config --set ssl_verify C:\\Users\\uname\\Documents\\cacert_with_doi.pem\n</code></pre> <ol> <li>Verify it worked</li> </ol> <pre><code>conda config --show ssl_verify\n</code></pre> <ul> <li>It should return something like</li> </ul> <pre><code>(coastseg) C:\\Users\\uname&gt;conda config --show ssl_verify\nssl_verify: C:\\Users\\uname\\Documents\\cacert_with_doi.pem\n</code></pre>"},{"location":"install/#optional-step-only-if-you-get-ssl-errors-with-git","title":"Optional Step (only if you get ssl errors with git)","text":"<ol> <li> <p>Make a <code>.gitconfig</code> file</p> </li> <li> <p>Example location: <code>c:\\Users\\me\\.gitconfig</code></p> </li> <li>Make sure to replace <code>C:/Users/uname/Documents/DOIRootCA2.cer</code> with your username</li> </ol> <pre><code>[filter \"lfs\"]\n    clean = git-lfs clean -- %f\n    smudge = git-lfs smudge -- %f\n    process = git-lfs filter-process\n    required = true\n[user]\n    name = Sharon Fitzpatrick\n    email = SF2309@Gmail.Com\n[http]\n    sslbackend = schannel\n    sslVerify = true\n    sslcainfo = C:/Users/uname/Documents/DOIRootCA2.cer\n</code></pre>"},{"location":"install/#phase-3-install-coastseg-normally","title":"Phase 3: Install CoastSeg Normally","text":"<p>Now that pip is working, follow the rest of the installation instructions located on coastseg's front page. https://github.com/Doodleverse/CoastSeg</p>"},{"location":"install/#step-2-configure-coastseg-for-a-secure-network","title":"Step 2: Configure CoastSeg for a Secure Network","text":"<p>To use coastseg on a secure network you need to add the location of the certification file for your network in the <code>certifications.json</code> file.</p> <ol> <li>Open the <code>certifications.json</code> file</li> </ol> <p>This file is located in the main CoastSeg directory</p> <pre><code>\u251c\u2500\u2500 CoastSeg\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 src\n\u2502\u00a0\u00a0 |  |_ coastseg\n\u2502\u00a0\u00a0 |  |  |_ __init__.py\n\u2502\u00a0\u00a0 |  |  |_bbox.py\n\u2502\u00a0\u00a0 |  |  |_roi.py\n|\n|___data\n|    |_ &lt;data downloaded here&gt; # automatically created by coastseg when imagery is downloaded\n|\n|\n|___certifications.json  *This is the file you need to modify*\n</code></pre> <p></p> <ol> <li> <p>Modify <code>cert_path</code> to have the full path to your cert file.</p> </li> <li> <p>Windows Users: Make sure to replace each <code>\\</code> with <code>\\\\</code></p> </li> </ol> <p>Here is an example of the full path to a cert file.</p> <p></p> <ol> <li>That's it. You're done! \ud83c\udf8a</li> </ol>"},{"location":"install/#wsl-setup-over-a-secure-network","title":"WSL SetUp Over a Secure Network","text":"<p>If you are using WSL to run coastseg you will need to install coastseg to your WSL instance that's because coastseg downloads files to where its installed and if its not running where it was installed it will fail to find of your data.</p>"},{"location":"install/#run-these-commands-each-time-you-open-wsl","title":"Run these commands each time you open WSL","text":"<ul> <li>Make sure to replace <code>\"mnt/c/users/uname/documents/cacert_with_doi.pem\"</code> with your user name</li> </ul> <pre><code>export PIP_CERT=mnt/c/users/uname/documents/cacert_with_doi.pem\nexport SSL_CERT_FILE=mnt/c/users/uname/documents/cacert_with_doi.pem\nexport REQUESTS_CA_BUNDLE=mnt/c/users/uname/documents/cacert_with_doi.pem\n</code></pre>"},{"location":"install/#run-these-commands-in-wsl-once","title":"Run these commands in WSL once","text":"<ul> <li>Make sure to replace <code>uname</code> with your username <code>mnt/c/users/uname/documents/cacert_with_doi.pem</code> and verify you have <code>cacert_with_doi.pem</code> installed in that location.</li> <li>Make sure to replace <code>\"mnt/c/users/uname/documents/cacert_with_doi.pem\"</code> with your user name</li> </ul> <pre><code>conda config --set ssl_verify mnt/c/users/uname/documents/cacert_with_doi.pem\ngit config --global http.sslCAInfo mnt/c/users/uname/documents/DOIRootCA2.cer\n</code></pre>"}]}